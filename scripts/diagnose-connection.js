#!/usr/bin/env node

/**
 * Script de diagn√≥stico para problemas de conectividade do banco
 * GB-Loca√ß√µes - Diagn√≥stico de Conex√£o
 */

import { PrismaClient } from '@prisma/client'
import { execSync } from 'child_process'

console.log('üîç DIAGN√ìSTICO DE CONECTIVIDADE - GB LOCA√á√ïES')
console.log('=' * 60)

// 1. Verificar vari√°veis de ambiente
console.log('\nüìã 1. VERIFICANDO VARI√ÅVEIS DE AMBIENTE')
console.log('-' * 40)

const requiredEnvVars = ['DATABASE_URL', 'DIRECT_URL']
let hasAllEnvVars = true

requiredEnvVars.forEach((varName) => {
  const value = process.env[varName]
  if (value) {
    // Mascarar a URL para seguran√ßa
    const maskedValue = value.replace(/\/\/[^:]+:[^@]+@/, '//***:***@')
    console.log(`‚úÖ ${varName}: ${maskedValue}`)
  } else {
    console.log(`‚ùå ${varName}: AUSENTE`)
    hasAllEnvVars = false
  }
})

if (!hasAllEnvVars) {
  console.log('‚ùå Algumas vari√°veis de ambiente est√£o ausentes!')
  process.exit(1)
}

// 2. Verificar vers√£o do Prisma
console.log('\nüîß 2. VERIFICANDO VERS√ÉO DO PRISMA')
console.log('-' * 40)

try {
  const prismaVersion = execSync('npx prisma version', { encoding: 'utf8' })
  console.log(prismaVersion)
} catch (error) {
  console.log('‚ùå Erro ao verificar vers√£o do Prisma:', error.message)
}

// 3. Verificar gera√ß√£o do cliente
console.log('\n‚öôÔ∏è 3. VERIFICANDO GERA√á√ÉO DO CLIENTE PRISMA')
console.log('-' * 40)

try {
  const generateOutput = execSync('npx prisma generate', { encoding: 'utf8' })
  console.log(generateOutput)

  // Verificar se mostra engine=binary ou engine=none
  if (generateOutput.includes('engine=binary')) {
    console.log('‚úÖ Cliente gerado com engine bin√°rio')
  } else if (generateOutput.includes('engine=none')) {
    console.log('‚ö†Ô∏è  Cliente gerado com engine=none (pode ser problema)')
  }
} catch (error) {
  console.log('‚ùå Erro na gera√ß√£o do cliente:', error.message)
}

// 4. Teste de conectividade b√°sica
console.log('\nüåê 4. TESTE DE CONECTIVIDADE B√ÅSICA')
console.log('-' * 40)

const prisma = new PrismaClient({
  log: ['error', 'warn', 'info'],
})

try {
  console.log('üîÑ Tentando conectar ao banco...')

  // Teste de conex√£o simples
  await prisma.$connect()
  console.log('‚úÖ Conex√£o estabelecida com sucesso!')

  // Teste de query simples
  console.log('üîÑ Testando query simples...')
  const result = await prisma.$queryRaw`SELECT 1 as test`
  console.log('‚úÖ Query executada com sucesso:', result)
} catch (error) {
  console.log('‚ùå ERRO DE CONECTIVIDADE:')
  console.log('C√≥digo:', error.code)
  console.log('Mensagem:', error.message)

  if (error.code === 'P1001') {
    console.log('\nüí° SUGEST√ïES PARA ERRO P1001:')
    console.log('‚Ä¢ Verificar se o Supabase est√° funcionando')
    console.log('‚Ä¢ Verificar se as credenciais est√£o corretas')
    console.log('‚Ä¢ Verificar conectividade de rede')
    console.log('‚Ä¢ Verificar se n√£o h√° vari√°veis PRISMA_GENERATE_* definidas')
  }
} finally {
  await prisma.$disconnect()
}

// 5. Verificar vari√°veis problem√°ticas do Prisma
console.log('\nüö® 5. VERIFICANDO VARI√ÅVEIS PROBLEM√ÅTICAS')
console.log('-' * 40)

const problematicVars = [
  'PRISMA_GENERATE_DATAPROXY',
  'PRISMA_GENERATE_ACCELERATE',
  'PRISMA_GENERATE_NO_ENGINE',
]

let hasProblematicVars = false

problematicVars.forEach((varName) => {
  const value = process.env[varName]
  if (value !== undefined) {
    console.log(`‚ö†Ô∏è  ${varName}: "${value}" (PROBLEM√ÅTICA!)`)
    hasProblematicVars = true
  } else {
    console.log(`‚úÖ ${varName}: n√£o definida`)
  }
})

if (hasProblematicVars) {
  console.log('\n‚ùå VARI√ÅVEIS PROBLEM√ÅTICAS ENCONTRADAS!')
  console.log('Essas vari√°veis podem for√ßar engine=none no Prisma 6.15.0')
  console.log('Remova-as completamente do seu .env')
}

// 6. Verificar status do Supabase
console.log('\nüåç 6. VERIFICANDO STATUS DO SUPABASE')
console.log('-' * 40)

try {
  const response = await fetch('https://status.supabase.com/api/v2/status.json')
  const status = await response.json()
  console.log(`‚úÖ Status Supabase: ${status.status.description}`)
} catch (error) {
  console.log(
    '‚ö†Ô∏è  N√£o foi poss√≠vel verificar status do Supabase:',
    error.message
  )
}

console.log('\nüèÅ DIAGN√ìSTICO CONCLU√çDO')
console.log('=' * 60)
