#!/usr/bin/env node

/**
 * Script para Monitorar Uso de √çndices
 *
 * Este script verifica o uso dos √≠ndices criados para foreign keys
 * e recomenda quais podem ser removidos ap√≥s per√≠odo de observa√ß√£o
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

// Cores para output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
}

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`)
}

async function monitorIndexUsage() {
  try {
    log('üìä MONITORANDO USO DE √çNDICES', 'bright')
    log('===============================', 'bright')
    log(
      'Verificando estat√≠sticas de uso dos √≠ndices criados para foreign keys\n',
      'cyan'
    )

    const indexesToMonitor = [
      'idx_accounts_userid',
      'idx_addresses_userid',
      'idx_cart_items_equipmentid',
      'idx_cart_items_cartid',
      'idx_equipments_categoryid',
      'idx_quote_items_equipmentid',
      'idx_quote_items_quoteid',
      'idx_quotes_userid',
      'idx_rental_items_equipmentid',
      'idx_rental_items_rentalid',
      'idx_rentals_userid',
      'idx_sessions_userid',
    ]

    log('üîç Verificando estat√≠sticas de uso...', 'cyan')

    for (let i = 0; i < indexesToMonitor.length; i++) {
      const indexName = indexesToMonitor[i]

      try {
        // Verificar estat√≠sticas de uso do √≠ndice
        const usageStats = await prisma.$queryRaw`
          SELECT 
            schemaname,
            tablename,
            indexname,
            idx_tup_read,
            idx_tup_fetch
          FROM pg_stat_user_indexes 
          WHERE indexname = ${indexName}
        `

        if (usageStats.length > 0) {
          const stats = usageStats[0]
          const reads = parseInt(stats.idx_tup_read) || 0
          const fetches = parseInt(stats.idx_tup_fetch) || 0

          if (reads > 0 || fetches > 0) {
            log(
              `   ‚úÖ ${indexName}: ${reads} reads, ${fetches} fetches`,
              'green'
            )
          } else {
            log(`   ‚ö†Ô∏è  ${indexName}: Nenhum uso detectado ainda`, 'yellow')
          }
        } else {
          log(`   ‚ùì ${indexName}: Estat√≠sticas n√£o dispon√≠veis`, 'blue')
        }
      } catch (error) {
        log(`   ‚ùå ${indexName}: Erro ao verificar - ${error.message}`, 'red')
      }
    }

    log('\nüìã RECOMENDA√á√ïES:', 'bright')
    log('==================', 'bright')
    log('', 'reset')
    log('üéØ ESTRAT√âGIA RECOMENDADA:', 'cyan')
    log('', 'reset')
    log('1. ‚úÖ MANTER todos os √≠ndices criados', 'green')
    log('   - S√£o necess√°rios para performance das foreign keys', 'green')
    log('   - Melhoram JOINs entre tabelas relacionadas', 'green')
    log('   - Seguem boas pr√°ticas de banco de dados', 'green')
    log('', 'reset')
    log('2. ‚è∞ AGUARDAR uso natural (30-60 dias)', 'yellow')
    log('   - √çndices foram criados recentemente', 'yellow')
    log('   - Sistema precisa de tempo para utiliz√°-los', 'yellow')
    log('   - Mais dados = mais uso dos √≠ndices', 'yellow')
    log('', 'reset')
    log('3. üìä MONITORAR periodicamente', 'blue')
    log('   - Execute este script semanalmente', 'blue')
    log('   - Verifique estat√≠sticas de uso', 'blue')
    log('   - Remova apenas √≠ndices realmente n√£o utilizados', 'blue')
    log('', 'reset')
    log('4. üö´ N√ÉO remover √≠ndices de foreign keys', 'red')
    log('   - S√£o cr√≠ticos para integridade referencial', 'red')
    log('   - Melhoram performance de consultas relacionais', 'red')
    log('   - Warnings de "unused" s√£o tempor√°rios', 'red')

    log('\nüí° COMANDO PARA MONITORAMENTO:', 'bright')
    log('node scripts/monitor-index-usage.js', 'cyan')
  } catch (error) {
    log('‚ùå Erro durante monitoramento:', 'red')
    console.error(error)
  } finally {
    await prisma.$disconnect()
  }
}

monitorIndexUsage()
