#!/usr/bin/env node
/**
 * Script para corrigir erros gramaticais em arquivos usando LanguageTool API
 *
 * Uso:
 *   node scripts/fix-grammar.mjs [arquivo]
 *
 * IMPORTANTE: Este script usa a API p√∫blica do LanguageTool (gratuita)
 * com limite de 20 requisi√ß√µes/minuto. Para uso intensivo, considere
 * instalar o servidor local.
 */

import { readFileSync, writeFileSync, existsSync } from 'fs'
import { resolve } from 'path'

// Arquivo alvo (padr√£o: CHANGELOG.md)
const targetFile = process.argv[2] || 'CHANGELOG.md'
const filePath = resolve(process.cwd(), targetFile)

// Verificar se arquivo existe
if (!existsSync(filePath)) {
  console.error(`‚ùå Arquivo n√£o encontrado: ${targetFile}`)
  process.exit(1)
}

console.log(`üìñ Analisando gram√°tica de: ${targetFile}`)
console.log('‚ö†Ô∏è  Usando API p√∫blica do LanguageTool (pode ser lento)...\n')

// Ler arquivo
let content = readFileSync(filePath, 'utf8')

// Remover blocos de c√≥digo para n√£o confundir o LanguageTool
const codeBlocks = []
let codeBlockIndex = 0

// Substituir code blocks por placeholders
content = content.replace(/```[\s\S]*?```/g, (match) => {
  const placeholder = `CODEBLOCK${codeBlockIndex}`
  codeBlocks.push({ placeholder, content: match })
  codeBlockIndex++
  return placeholder
})

// Substituir inline code por placeholders
content = content.replace(/`[^`]+`/g, (match) => {
  const placeholder = `INLINECODE${codeBlockIndex}`
  codeBlocks.push({ placeholder, content: match })
  codeBlockIndex++
  return placeholder
})

// Dividir em blocos menores (API tem limite de tamanho)
const CHUNK_SIZE = 10000 // caracteres por requisi√ß√£o
const chunks = []
for (let i = 0; i < content.length; i += CHUNK_SIZE) {
  chunks.push(content.substring(i, i + CHUNK_SIZE))
}

console.log(`üìä Total de caracteres: ${content.length}`)
console.log(`üì¶ Dividido em ${chunks.length} bloco(s)\n`)

async function checkGrammar(text) {
  const apiUrl = 'https://api.languagetool.org/v2/check'

  const params = new URLSearchParams({
    text: text,
    language: 'pt-BR',
    enabledOnly: 'false',
  })

  try {
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
      },
      body: params.toString(),
    })

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }

    return await response.json()
  } catch (error) {
    console.error(`‚ùå Erro na API: ${error.message}`)
    return null
  }
}

// Lista de regras a IGNORAR (falsos positivos comuns em docs t√©cnicas)
const IGNORED_RULES = [
  'MORFOLOGIK_RULE_PT_BR', // Ignora palavras t√©cnicas em ingl√™s
  'LOOSE_ACCENTS', // Ignora backticks como acentos
  'UNPAIRED_BRACKETS', // Ignora colchetes de markdown
  'UPPERCASE_SENTENCE_START', // Ignora in√≠cio de frase em mai√∫scula (cabe√ßalhos)
  'PT_BARBARISMS_REPLACE', // Ignora estrangeirismos t√©cnicos aceitos
  'PT_COLOUR_HYPHENATION', // Ignora cores sem h√≠fen (comum em CSS/Tailwind)
  'ABREVIATIONS_PUNCTUATION', // Ignora abrevia√ß√µes sem ponto (comum em tech docs)
  'TIME_FORMAT', // Ignora vers√µes (5.39.11) interpretadas como hora
  'DECIMAL_COMMA', // Ignora n√∫meros com ponto (vers√µes, n√£o decimais)
  'UPPERCASE_AFTER_COMMA', // Ignora mai√∫scula ap√≥s dois pontos (comum em t√≠tulos)
  'SPACE_AFTER_PUNCTUATION', // Ignora espa√ßo ap√≥s ... (comum em truncamentos)
  'GENERAL_NUMBER_AGREEMENT_ERRORS', // Ignora concord√¢ncia (muitos falsos positivos com termos t√©cnicos)
  'SEPARADORES_DE_ESTADOS_BRASILEIROS', // Ignora formata√ß√£o de estados
  'WHITESPACE_RULE', // Ignora espa√ßos duplos (trivial, formatter resolve)
  'PT_WORDINESS_REPLACE', // Ignora sugest√µes de estilo (n√£o s√£o erros)
  'GENERAL_GENDER_AGREEMENT_ERRORS', // Ignora concord√¢ncia de g√™nero (status √© masculino, base pode ser)
]

// Lista de palavras t√©cnicas a IGNORAR
const TECHNICAL_TERMS = [
  // Termos markdown e changelog
  'changelog',
  'keep',
  'fixed',
  'added',
  'changed',
  'removed',
  'security',
  'technical',

  // Bibliotecas e frameworks
  'sonner',
  'toaster',
  'promise',
  'react',
  'next.js',
  'prisma',
  'supabase',
  'vercel',
  'storybook',
  'tailwind',
  'typescript',
  'javascript',
  'node',
  'npm',
  'pnpm',
  'vitest',
  'playwright',
  'nextauth',
  'stripe',
  'resend',
  'zod',
  'framer',
  'motion',
  'radix',
  'shadcn',
  'lucide',
  'embla',
  'carousel',

  // Termos CSS/UI
  'hover',
  'focus',
  'active',
  'border',
  'shadow',
  'padding',
  'margin',
  'gap',
  'grid',
  'flex',
  'inline',
  'block',
  'absolute',
  'relative',
  'fixed',
  'static',
  'sticky',
  'overflow',
  'hidden',
  'visible',
  'auto',
  'scroll',
  'rounded',
  'gradient',
  'backdrop',
  'media',
  'queries',
  'breakpoint',
  'responsive',
  'mobile',
  'desktop',
  'tablet',
  'design',
  'tokens',
  'system',
  'theme',
  'variant',
  'size',
  'color',
  'spacing',

  // Termos de c√≥digo
  'true',
  'false',
  'null',
  'undefined',
  'const',
  'let',
  'var',
  'function',
  'class',
  'import',
  'export',
  'default',
  'return',
  'await',
  'async',
  'props',
  'state',

  // Atributos HTML/React
  'data-visible',
  'data-type',
  'data-description',
  'data-title',
  'data-sonner',
  'className',
  'onClick',
  'onChange',
  'onSubmit',

  // Termos t√©cnicos gerais
  'api',
  'url',
  'css',
  'html',
  'json',
  'sql',
  'http',
  'https',
  'localhost',
  'build',
  'deploy',
  'commit',
  'push',
  'pull',
  'merge',
  'branch',
  'git',
  'github',
  'database',
  'schema',
  'migration',
  'seed',
  'query',
  'mutation',
  'resolver',
  'middleware',
  'endpoint',
  'route',
  'handler',
  'controller',
  'service',
  'repository',
  'model',
  'view',
  'component',
  'hook',
  'util',
  'helper',
  'config',
  'env',
  'type',
  'interface',
  'enum',
  'union',
  'generic',
  'extends',
  'implements',
  'public',
  'private',
  'protected',

  // UI/UX terms
  'toast',
  'toasts',
  'modal',
  'dialog',
  'popover',
  'dropdown',
  'combobox',
  'select',
  'input',
  'button',
  'card',
  'badge',
  'avatar',
  'skeleton',
  'spinner',
  'loader',
  'accordion',
  'tabs',
  'carousel',
  'slider',
  'switch',
  'checkbox',
  'radio',
  'form',
  'label',
  'placeholder',
  'tooltip',
  'breadcrumb',
  'pagination',
  'navigation',
  'sidebar',
  'header',
  'footer',
  'layout',
  'container',
  'wrapper',
  'section',
  'article',

  // Termos espec√≠ficos do projeto
  'admin',
  'dashboard',
  'equipamentos',
  'categorias',
  'orcamentos',
  'locacoes',
  'gb-locacoes',
  'whatsapp',
  'oauth',
  'login',
  'logout',
  'signup',
  'signin',

  // Cores
  'orange',
  'green',
  'blue',
  'red',
  'gray',
  'grey',
  'white',
  'black',
  'yellow',
  'purple',
  'pink',
  'indigo',
  'teal',
  'cyan',
  'slate',
  'zinc',
  'neutral',
  'stone',
]

// Processar chunks
let totalErrors = 0
const allMatches = []

for (let i = 0; i < chunks.length; i++) {
  console.log(`üîç Analisando bloco ${i + 1}/${chunks.length}...`)

  const result = await checkGrammar(chunks[i])

  if (result && result.matches) {
    // Filtrar falsos positivos
    const filtered = result.matches.filter((match) => {
      // Ignorar regras espec√≠ficas (exato ou que come√ßam com)
      if (
        IGNORED_RULES.some(
          (rule) => match.rule.id === rule || match.rule.id.startsWith(rule)
        )
      ) {
        return false
      }

      // Ignorar palavras t√©cnicas
      const errorText = match.context.text
        .substring(
          match.context.offset,
          match.context.offset + match.context.length
        )
        .toLowerCase()

      if (TECHNICAL_TERMS.some((term) => errorText.includes(term))) {
        return false
      }

      return true
    })

    totalErrors += filtered.length
    allMatches.push(...filtered)
    console.log(
      `  ‚úì Encontrados ${result.matches.length} problema(s) (${filtered.length} relevantes)\n`
    )
  }

  // Delay para respeitar rate limit
  if (i < chunks.length - 1) {
    await new Promise((resolve) => setTimeout(resolve, 3000))
  }
}

console.log(`\nüìä An√°lise conclu√≠da!`)
console.log(`üîç Total de problemas encontrados: ${totalErrors}\n`)

if (totalErrors === 0) {
  console.log('‚úÖ Nenhum erro gramatical encontrado!')
  process.exit(0)
}

// Mostrar primeiros 20 erros
console.log('üìù Primeiros problemas encontrados:\n')
const topMatches = allMatches.slice(0, 20)

topMatches.forEach((match, index) => {
  const context = match.context.text
  const offset = match.context.offset
  const length = match.context.length
  const error = context.substring(offset, offset + length)
  const suggestion = match.replacements[0]?.value || 'sem sugest√£o'

  console.log(`${index + 1}. "${error}" ‚Üí "${suggestion}"`)
  console.log(`   Motivo: ${match.message}`)
  console.log(`   Regra: ${match.rule.id}\n`)
})

if (totalErrors > 20) {
  console.log(`... e mais ${totalErrors - 20} problema(s)\n`)
}

console.log('‚ö†Ô∏è  NOTA: Para aplicar corre√ß√µes, use a extens√£o LTeX no VS Code')
console.log('   ou revise manualmente usando as sugest√µes acima.\n')
console.log(
  'üí° Comando recomendado: abra o arquivo no VS Code e use Ctrl+. nos erros'
)
