generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

generator zod {
  provider                         = "prisma-zod-generator"
  output                          = "../lib/validations"
  relationModel                   = true
  modelCase                       = "camelCase"
  modelSuffix                     = "Schema"
  useDecimalJs                    = true
  prismaJsonNullability           = true
  writeBarrelFiles                = true
  createInputTypes                = false
  addInputTypeValidation          = false
  validateWhereUniqueInput        = false
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes       = true
  createPartialTypes              = true
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          Role      @default(CLIENT)
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  quotes        Quote[]
  rentals       rentals[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  description String?
  icon        String?
  iconColor   String      @default("#3B82F6")
  bgColor     String      @default("#EFF6FF")
  fontColor   String      @default("#1E40AF")
  slug        String      @unique
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  equipments  Equipment[]

  @@map("categories")
}

model Equipment {
  id           String         @id @default(cuid())
  name         String
  description  String?
  pricePerDay  Decimal
  images       String[]
  available    Boolean        @default(true)
  categoryId   String         @db.Uuid
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  category_id  String?        @db.Uuid
  category     Category       @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_category")
  quoteItems   QuoteItem[]
  rental_items rental_items[]

  @@map("equipments")
}

model Quote {
  id        String      @id @default(cuid())
  name      String
  email     String
  phone     String
  company   String?
  message   String?
  total     Decimal     @default(0)
  status    QuoteStatus @default(PENDING)
  userId    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     QuoteItem[]
  user      User?       @relation(fields: [userId], references: [id])

  @@map("quotes")
}

model QuoteItem {
  id          String    @id @default(cuid())
  quoteId     String
  equipmentId String
  quantity    Int       @default(1)
  days        Int       @default(1)
  pricePerDay Decimal
  total       Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  quote       Quote     @relation(fields: [quoteId], references: [id], onDelete: Cascade)

  @@map("quote_items")
}

model rental_items {
  id          String    @id
  rentalid    String
  equipmentid String
  quantity    Int       @default(1)
  priceperday Decimal   @db.Decimal
  totaldays   Int
  totalprice  Decimal   @db.Decimal
  createdat   DateTime? @default(now()) @db.Timestamp(6)
  updatedat   DateTime? @default(now()) @db.Timestamp(6)
  equipments  Equipment @relation(fields: [equipmentid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  rentals     rentals   @relation(fields: [rentalid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model rentals {
  id           String         @id
  startdate    DateTime       @db.Timestamp(6)
  enddate      DateTime       @db.Timestamp(6)
  total        Decimal        @db.Decimal
  status       String?        @default("PENDING")
  userid       String
  createdat    DateTime?      @default(now()) @db.Timestamp(6)
  updatedat    DateTime?      @default(now()) @db.Timestamp(6)
  rental_items rental_items[]
  users        User           @relation(fields: [userid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum Role {
  ADMIN
  CLIENT
}

enum QuoteStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
  FAILED
}

enum DeliveryType {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  CASH
  BOLETO
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
}

enum PaymentType {
  RENTAL
  DEPOSIT
  FINE
  DAMAGE
  LATE_FEE
}

enum RentalItemStatus {
  RENTED
  RETURNED
  DAMAGED
  LOST
}

enum RentalStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  OVERDUE
  PENDING_RETURN
}

enum UserRole {
  ADMIN
  OPERATOR
  FINANCIAL
  CUSTOMER
}

enum delivery_type {
  pickup
  delivery
  both
}

enum quote_status {
  pending
  approved
  rejected
  expired
}

enum user_role {
  ADMIN
  OPERATOR
  FINANCIAL
  CUSTOMER
}

model Setting {
  id                   String   @id @default(uuid())
  companyPhone         String   @default("")
  companyIconUrl       String   @default("")
  aboutUsText          String   @default("")
  companyAddress       String   @default("")
  heroCarousel         Json     @default("[]")
  contactEmail         String   @default("")
  socialLinks          Json     @default("{}")
  seoTitle             String   @default("GB Locações - Equipamentos para Construção")
  seoDescription       String   @default("Locação de equipamentos para construção civil com qualidade e segurança")
  themeColorPrimary    String   @default("#ea580c")
  maintenanceMode      Boolean  @default(false)
  analyticsTrackingId  String   @default("")
  footerText           String   @default("")
  businessHours        Json     @default("{}")
  supportChat          Boolean  @default(true)
  whatsappNumber       String   @default("")
  favicon              String   @default("")
  logoSecondary        String   @default("")
  defaultLanguage      String   @default("pt-BR")
  baseCurrency         String   @default("BRL")
  maintenanceMessage   String   @default("Site em manutenção. Voltamos em breve!")
  smtpConfig           Json     @default("{}")
  uploadLimits         Json     @default("{}")
  securityConfig       Json     @default("{}")
  customCss            String   @default("")
  customJs             String   @default("")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@map("settings")
}
